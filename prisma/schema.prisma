// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================================
// CORE TABLES (matching CSV structure exactly)
// ===========================================

// Core Pokemon tables
model Pokemon {
  id              Int     @id
  identifier      String
  species_id      Int
  height          Int
  weight          Int
  base_experience Int
  order           Int
  is_default      Int

  // Relations
  species         PokemonSpecies @relation(fields: [species_id], references: [id])
  forms           PokemonForms[]
  abilities       PokemonAbilities[]
  abilitiesPast   PokemonAbilitiesPast[]
  moves           PokemonMoves[]
  stats           PokemonStats[]
  types           PokemonTypes[]
  typesPast       PokemonTypesPast[]
  items           PokemonItems[]
  gameIndices     PokemonGameIndices[]
  encounters      Encounters[]

  @@map("pokemon")
}

model PokemonSpecies {
  id                      Int     @id
  identifier              String
  generation_id           Int
  evolves_from_species_id Int?
  evolution_chain_id      Int
  color_id                Int
  shape_id                Int
  habitat_id              Int?
  gender_rate             Int
  capture_rate            Int
  base_happiness          Int
  is_baby                 Int
  hatch_counter           Int
  has_gender_differences  Int
  growth_rate_id          Int
  forms_switchable        Int
  is_legendary            Int
  is_mythical             Int
  order                   Int
  conquest_order          Int?

  // Relations
  generation              Generations @relation(fields: [generation_id], references: [id])
  evolvesFrom             PokemonSpecies? @relation("SpeciesEvolution", fields: [evolves_from_species_id], references: [id])
  evolvesTo               PokemonSpecies[] @relation("SpeciesEvolution")
  evolutionChain          EvolutionChains @relation(fields: [evolution_chain_id], references: [id])
  color                   PokemonColors @relation(fields: [color_id], references: [id])
  shape                   PokemonShapes @relation(fields: [shape_id], references: [id])
  habitat                 PokemonHabitats? @relation(fields: [habitat_id], references: [id])
  growthRate              GrowthRates @relation(fields: [growth_rate_id], references: [id])
  pokemon                 Pokemon[]
  eggGroups               PokemonEggGroups[]
  dexNumbers              PokemonDexNumbers[]
  names                   PokemonSpeciesNames[]
  prose                   PokemonSpeciesProse[]
  flavorSummaries         PokemonSpeciesFlavorSummaries[]
  flavorText              PokemonSpeciesFlavorText[]
  evolution               PokemonEvolution[]
  conquestAbilities       ConquestPokemonAbilities[]
  conquestEvolution       ConquestPokemonEvolution[]
  conquestMoves           ConquestPokemonMoves[]
  conquestStats           ConquestPokemonStats[]
  conquestMaxLinks        ConquestMaxLinks[]
  conquestTransformation  ConquestTransformationPokemon[]
  palPark                 PalPark[]

  @@map("pokemon_species")
}

model PokemonForms {
  id                              Int     @id
  identifier                      String
  form_identifier                 String?
  pokemon_id                      Int
  introduced_in_version_group_id  Int
  is_default                      Int
  is_battle_only                  Int
  is_mega                         Int
  form_order                      Int
  order                           Int

  // Relations
  pokemon                         Pokemon @relation(fields: [pokemon_id], references: [id])
  versionGroup                    VersionGroups @relation(fields: [introduced_in_version_group_id], references: [id])
  generations                     PokemonFormGenerations[]
  types                           PokemonFormTypes[]
  pokeathlonStats                 PokemonFormPokeathlonStats[]
  names                           PokemonFormNames[]

  @@map("pokemon_forms")
}

// Core Move tables
model Moves {
  id                      Int     @id
  identifier              String
  generation_id           Int
  type_id                 Int
  power                   Int?
  pp                      Int?
  accuracy                Int?
  priority                Int
  target_id               Int
  damage_class_id         Int
  effect_id               Int?
  effect_chance           Int?
  contest_type_id         Int?
  contest_effect_id       Int?
  super_contest_effect_id Int?

  // Relations
  generation              Generations @relation(fields: [generation_id], references: [id])
  type                    Types @relation(fields: [type_id], references: [id])
  target                  MoveTargets @relation(fields: [target_id], references: [id])
  damageClass             MoveDamageClasses @relation(fields: [damage_class_id], references: [id])
  effect                  MoveEffects? @relation(fields: [effect_id], references: [id])
  contestType             ContestTypes? @relation(fields: [contest_type_id], references: [id])
  contestEffect           ContestEffects? @relation(fields: [contest_effect_id], references: [id])
  superContestEffect      SuperContestEffects? @relation(fields: [super_contest_effect_id], references: [id])
  pokemonMoves            PokemonMoves[]
  machines                Machines[]
  names                   MoveNames[]
  prose                   MoveProse[]
  flavorText              MoveFlavorText[]
  flavorSummaries         MoveFlavorSummaries[]
  changelog               MoveChangelog[]
  meta                    MoveMeta[]
  metaStatChanges         MoveMetaStatChanges[]
  flagMap                 MoveFlagMap[]
  conquestData            ConquestMoveData[]
  conquestPokemonMoves    ConquestPokemonMoves[]
  contestCombos           ContestCombos[] @relation("FirstMove")
  contestCombosSecond     ContestCombos[] @relation("SecondMove")
  superContestCombos      SuperContestCombos[] @relation("SuperFirstMove")
  superContestCombosSecond SuperContestCombos[] @relation("SuperSecondMove")

  @@map("moves")
}

model MoveEffects {
  id Int @id

  // Relations
  moves                   Moves[]
  changelog               MoveEffectChangelog[]
  changelogProse          MoveEffectChangelogProse[]
  prose                   MoveEffectProse[]

  @@map("move_effects")
}

model MoveTargets {
  id         Int    @id
  identifier String

  // Relations
  moves      Moves[]
  prose      MoveTargetProse[]

  @@map("move_targets")
}

model MoveDamageClasses {
  id         Int    @id
  identifier String

  // Relations
  moves      Moves[]
  prose      MoveDamageClassProse[]

  @@map("move_damage_classes")
}

// Core Type tables
model Types {
  id              Int     @id
  identifier      String
  generation_id   Int
  damage_class_id Int?

  // Relations
  generation      Generations @relation(fields: [generation_id], references: [id])
  damageClass     Stats? @relation(fields: [damage_class_id], references: [id])
  moves           Moves[]
  pokemonTypes    PokemonTypes[]
  pokemonTypesPast PokemonTypesPast[]
  formTypes       PokemonFormTypes[]
  names           TypeNames[]
  gameIndices     TypeGameIndices[]
  efficacy        TypeEfficacy[] @relation("DamageType")
  efficacyTarget  TypeEfficacy[] @relation("TargetType")
  efficacyPast    TypeEfficacyPast[] @relation("DamageTypePast")
  efficacyPastTarget TypeEfficacyPast[] @relation("TargetTypePast")
  conquestKingdoms ConquestKingdoms[]
  conquestSpecialties ConquestWarriorSpecialties[]
  conquestTransformation ConquestTransformationPokemon[]
  berryFlavors    BerryFlavors[]
  natures         Natures[] @relation("DecreasedStat")
  naturesIncreased Natures[] @relation("IncreasedStat")

  @@map("types")
}

// Core Ability tables
model Abilities {
  id              Int     @id
  identifier      String
  generation_id   Int
  is_main_series  Int

  // Relations
  generation      Generations @relation(fields: [generation_id], references: [id])
  pokemonAbilities PokemonAbilities[]
  pokemonAbilitiesPast PokemonAbilitiesPast[]
  conquestAbilities ConquestPokemonAbilities[]
  names           AbilityNames[]
  prose           AbilityProse[]
  flavorText      AbilityFlavorText[]
  changelog       AbilityChangelog[]
  changelogProse  AbilityChangelogProse[]

  @@map("abilities")
}

// Core Item tables
model Items {
  id               Int     @id
  identifier       String
  category_id      Int
  cost             Int
  fling_power      Int?
  fling_effect_id  Int?

  // Relations
  category         ItemCategories @relation(fields: [category_id], references: [id])
  flingEffect      ItemFlingEffects? @relation(fields: [fling_effect_id], references: [id])
  pokemonItems     PokemonItems[]
  machines         Machines[]
  berries          Berries[]
  names            ItemNames[]
  prose            ItemProse[]
  flavorText       ItemFlavorText[]
  flavorSummaries  ItemFlavorSummaries[]
  gameIndices      ItemGameIndices[]
  flagMap          ItemFlagMap[]

  @@map("items")
}

model ItemCategories {
  id         Int    @id
  pocket_id  Int
  identifier String

  // Relations
  pocket     ItemPockets @relation(fields: [pocket_id], references: [id])
  items      Items[]
  prose      ItemCategoryProse[]

  @@map("item_categories")
}

model ItemPockets {
  id         Int    @id
  identifier String

  // Relations
  categories ItemCategories[]
  names      ItemPocketNames[]

  @@map("item_pockets")
}

// Core Stat tables
model Stats {
  id              Int     @id
  damage_class_id Int?
  identifier      String
  is_battle_only  Int
  game_index      Int?

  @@map("stats")
}

// Core Generation/Version tables
model Generations {
  id              Int     @id
  main_region_id  Int
  identifier      String

  @@map("generations")
}

model VersionGroups {
  id            Int     @id
  identifier    String
  generation_id Int
  order         Int

  @@map("version_groups")
}

model Versions {
  id               Int     @id
  version_group_id Int
  identifier       String

  // Relations
  versionGroup     VersionGroups @relation(fields: [version_group_id], references: [id])
  encounters       Encounters[]
  pokemonItems     PokemonItems[]
  pokemonGameIndices PokemonGameIndices[]
  pokemonSpeciesFlavorText PokemonSpeciesFlavorText[]
  moveFlavorText   MoveFlavorText[]
  abilityFlavorText AbilityFlavorText[]
  itemFlavorText   ItemFlavorText[]
  locationAreaEncounterRates LocationAreaEncounterRates[]
  names            VersionNames[]

  @@map("versions")
}

// Core Region/Location tables
model Regions {
  id         Int    @id
  identifier String

  // Relations
  generations Generations[]
  locations   Locations[]
  pokedexes   Pokedexes[]
  names       RegionNames[]
  versionGroups VersionGroupRegions[]

  @@map("regions")
}

model Locations {
  id         Int     @id
  region_id  Int
  identifier String

  // Relations
  region     Regions @relation(fields: [region_id], references: [id])
  areas      LocationAreas[]
  names      LocationNames[]
  gameIndices LocationGameIndices[]
  evolution  PokemonEvolution[]

  @@map("locations")
}

model LocationAreas {
  id         Int     @id
  location_id Int
  game_index  Int
  identifier  String

  // Relations
  location   Locations @relation(fields: [location_id], references: [id])
  encounters Encounters[]
  prose      LocationAreaProse[]
  encounterRates LocationAreaEncounterRates[]

  @@map("location_areas")
}

// Core Language tables
model Languages {
  id         Int     @id
  iso639     String
  iso3166    String
  identifier String
  official   Int
  order      Int

  // Relations
  names      LanguageNames[]
  // Many localization tables reference this as local_language_id
  pokemonSpeciesNames PokemonSpeciesNames[]
  pokemonSpeciesProse PokemonSpeciesProse[]
  pokemonSpeciesFlavorSummaries PokemonSpeciesFlavorSummaries[]
  pokemonFormNames PokemonFormNames[]
  moveNames MoveNames[]
  moveProse MoveProse[]
  moveFlavorSummaries MoveFlavorSummaries[]
  moveDamageClassProse MoveDamageClassProse[]
  moveTargetProse MoveTargetProse[]
  moveFlagProse MoveFlagProse[]
  moveBattleStyleProse MoveBattleStyleProse[]
  moveMetaAilmentNames MoveMetaAilmentNames[]
  moveMetaCategoryProse MoveMetaCategoryProse[]
  moveEffectChangelogProse MoveEffectChangelogProse[]
  moveEffectProse MoveEffectProse[]
  typeNames TypeNames[]
  abilityNames AbilityNames[]
  abilityProse AbilityProse[]
  abilityChangelogProse AbilityChangelogProse[]
  itemNames ItemNames[]
  itemProse ItemProse[]
  itemFlavorSummaries ItemFlavorSummaries[]
  itemCategoryProse ItemCategoryProse[]
  itemPocketNames ItemPocketNames[]
  itemFlagProse ItemFlagProse[]
  itemFlingEffectProse ItemFlingEffectProse[]
  statNames StatNames[]
  generationNames GenerationNames[]
  versionNames VersionNames[]
  regionNames RegionNames[]
  locationNames LocationNames[]
  locationAreaProse LocationAreaProse[]
  pokedexProse PokedexProse[]
  evolutionTriggerProse EvolutionTriggerProse[]
  growthRateProse GrowthRateProse[]
  natureNames NatureNames[]
  contestTypeNames ContestTypeNames[]
  contestEffectProse ContestEffectProse[]
  superContestEffectProse SuperContestEffectProse[]
  encounterMethodProse EncounterMethodProse[]
  encounterConditionProse EncounterConditionProse[]
  encounterConditionValueProse EncounterConditionValueProse[]
  palParkAreaNames PalParkAreaNames[]
  pokeathlonStatNames PokeathlonStatNames[]
  pokemonMoveMethodProse PokemonMoveMethodProse[]
  pokemonShapeProse PokemonShapeProse[]
  pokemonColorNames PokemonColorNames[]
  pokemonHabitatNames PokemonHabitatNames[]
  berryFirmnessNames BerryFirmnessNames[]
  characteristicText CharacteristicText[]
  conquestEpisodeNames ConquestEpisodeNames[]
  conquestKingdomNames ConquestKingdomNames[]
  conquestMoveDisplacementProse ConquestMoveDisplacementProse[]
  conquestMoveEffectProse ConquestMoveEffectProse[]
  conquestMoveRangeProse ConquestMoveRangeProse[]
  conquestStatNames ConquestStatNames[]
  conquestWarriorNames ConquestWarriorNames[]
  conquestWarriorSkillNames ConquestWarriorSkillNames[]
  conquestWarriorStatNames ConquestWarriorStatNames[]
  eggGroupProse EggGroupProse[]

  @@map("languages")
}

// Core Pokedex tables
model Pokedexes {
  id             Int     @id
  region_id      Int
  identifier     String
  is_main_series Int

  // Relations
  region         Regions @relation(fields: [region_id], references: [id])
  dexNumbers     PokemonDexNumbers[]
  prose          PokedexProse[]
  versionGroups  PokedexVersionGroups[]

  @@map("pokedexes")
}

// Core Evolution tables
model EvolutionChains {
  id                  Int     @id
  baby_trigger_item_id Int?

  // Relations
  babyTriggerItem     Items? @relation(fields: [baby_trigger_item_id], references: [id])
  species             PokemonSpecies[]

  @@map("evolution_chains")
}

model EvolutionTriggers {
  id         Int    @id
  identifier String

  // Relations
  evolution  PokemonEvolution[]
  prose      EvolutionTriggerProse[]

  @@map("evolution_triggers")
}

model PokemonEvolution {
  id                      Int     @id
  evolved_species_id      Int
  evolution_trigger_id    Int
  trigger_item_id         Int?
  minimum_level           Int?
  gender_id               Int?
  location_id             Int?
  held_item_id            Int?
  time_of_day             String?
  known_move_id           Int?
  known_move_type_id      Int?
  minimum_happiness       Int?
  minimum_beauty          Int?
  minimum_affection       Int?
  relative_physical_stats Int?
  party_species_id        Int?
  party_type_id           Int?
  trade_species_id        Int?
  needs_overworld_rain    Int
  turn_upside_down        Int

  // Relations
  evolvedSpecies          PokemonSpecies @relation(fields: [evolved_species_id], references: [id])
  evolutionTrigger        EvolutionTriggers @relation(fields: [evolution_trigger_id], references: [id])
  triggerItem             Items? @relation(fields: [trigger_item_id], references: [id])
  gender                  Genders? @relation(fields: [gender_id], references: [id])
  location                Locations? @relation(fields: [location_id], references: [id])
  heldItem                Items? @relation(fields: [held_item_id], references: [id])
  knownMove               Moves? @relation(fields: [known_move_id], references: [id])
  knownMoveType           Types? @relation(fields: [known_move_type_id], references: [id])
  partySpecies            PokemonSpecies? @relation("PartySpecies", fields: [party_species_id], references: [id])
  partyType               Types? @relation("PartyType", fields: [party_type_id], references: [id])
  tradeSpecies            PokemonSpecies? @relation("TradeSpecies", fields: [trade_species_id], references: [id])

  @@map("pokemon_evolution")
}

// Core Growth Rate tables
model GrowthRates {
  id         Int     @id
  identifier String
  formula    String

  // Relations
  species    PokemonSpecies[]
  experience Experience[]
  prose      GrowthRateProse[]

  @@map("growth_rates")
}

// Core Experience tables
model Experience {
  growth_rate_id Int
  level          Int
  experience     Int

  // Relations
  growthRate     GrowthRates @relation(fields: [growth_rate_id], references: [id])

  @@id([growth_rate_id, level])
  @@map("experience")
}

// Core Gender tables
model Genders {
  id         Int    @id
  identifier String

  // Relations
  evolution  PokemonEvolution[]
  conquestWarriors ConquestWarriors[]

  @@map("genders")
}

// Core Egg Group tables
model EggGroups {
  id         Int    @id
  identifier String

  // Relations
  species    PokemonEggGroups[]
  prose      EggGroupProse[]

  @@map("egg_groups")
}

// Core Nature tables
model Natures {
  id                  Int     @id
  identifier          String
  decreased_stat_id   Int
  increased_stat_id   Int
  hates_flavor_id     Int
  likes_flavor_id     Int
  game_index          Int

  // Relations
  decreasedStat       Stats @relation("DecreasedStat", fields: [decreased_stat_id], references: [id])
  increasedStat       Stats @relation("IncreasedStat", fields: [increased_stat_id], references: [id])
  names               NatureNames[]
  battleStylePreferences NatureBattleStylePreferences[]
  pokeathlonStats     NaturePokeathlonStats[]

  @@map("natures")
}

// Core Contest tables
model ContestTypes {
  id         Int    @id
  identifier String

  // Relations
  moves      Moves[]
  names      ContestTypeNames[]
  berryFlavors BerryFlavors[]

  @@map("contest_types")
}

model ContestEffects {
  id     Int @id
  appeal Int
  jam    Int

  // Relations
  moves  Moves[]
  prose  ContestEffectProse[]

  @@map("contest_effects")
}

// Core Super Contest tables
model SuperContestEffects {
  id     Int @id
  appeal Int

  // Relations
  moves  Moves[]
  prose  SuperContestEffectProse[]

  @@map("super_contest_effects")
}

// Core Machine tables
model Machines {
  machine_number    Int
  version_group_id  Int
  item_id           Int
  move_id           Int

  // Relations
  versionGroup      VersionGroups @relation(fields: [version_group_id], references: [id])
  item              Items @relation(fields: [item_id], references: [id])
  move              Moves @relation(fields: [move_id], references: [id])

  @@id([machine_number, version_group_id])   
  @@map("machines")
}

// Core Encounter tables
model EncounterMethods {
  id         Int     @id
  identifier String
  order      Int

  // Relations
  slots      EncounterSlots[]
  prose      EncounterMethodProse[]
  encounterRates LocationAreaEncounterRates[]

  @@map("encounter_methods")
}

model EncounterSlots {
  id                   Int     @id
  version_group_id     Int
  encounter_method_id  Int
  slot                 Int?
  rarity               Int

  // Relations
  versionGroup         VersionGroups @relation(fields: [version_group_id], references: [id])
  encounterMethod      EncounterMethods @relation(fields: [encounter_method_id], references: [id])
  encounters           Encounters[]

  @@map("encounter_slots")
}

model Encounters {
  id                 Int     @id
  version_id         Int
  location_area_id   Int
  encounter_slot_id  Int
  pokemon_id         Int
  min_level          Int
  max_level          Int

  // Relations
  version            Versions @relation(fields: [version_id], references: [id])
  locationArea       LocationAreas @relation(fields: [location_area_id], references: [id])
  encounterSlot      EncounterSlots @relation(fields: [encounter_slot_id], references: [id])
  pokemon            Pokemon @relation(fields: [pokemon_id], references: [id])
  conditionValueMap  EncounterConditionValueMap[]

  @@map("encounters")
}

model EncounterConditions {
  id         Int    @id
  identifier String

  // Relations
  values     EncounterConditionValues[]
  prose      EncounterConditionProse[]

  @@map("encounter_conditions")
}

model EncounterConditionValues {
  id                      Int     @id
  encounter_condition_id  Int
  identifier              String
  is_default              Int

  // Relations
  condition               EncounterConditions @relation(fields: [encounter_condition_id], references: [id])
  conditionValueMap       EncounterConditionValueMap[]
  prose                   EncounterConditionValueProse[]

  @@map("encounter_condition_values")
}

model EncounterConditionValueMap {
  encounter_id                    Int @id
  encounter_condition_value_id    Int

  // Relations
  encounter                       Encounters @relation(fields: [encounter_id], references: [id])
  conditionValue                  EncounterConditionValues @relation(fields: [encounter_condition_value_id], references: [id])

  @@map("encounter_condition_value_map")
}

// Core Pal Park tables
model PalParkAreas {
  id         Int    @id
  identifier String

  // Relations
  palPark    PalPark[]
  names      PalParkAreaNames[]

  @@map("pal_park_areas")
}

model PalPark {
  species_id  Int @id
  area_id     Int
  base_score  Int
  rate        Int

  // Relations
  species     PokemonSpecies @relation(fields: [species_id], references: [id])
  area        PalParkAreas @relation(fields: [area_id], references: [id])

  @@map("pal_park")
}

// Core Pokeathlon tables
model PokeathlonStats {
  id         Int    @id
  identifier String

  // Relations
  formStats  PokemonFormPokeathlonStats[]
  natureStats NaturePokeathlonStats[]
  names      PokeathlonStatNames[]

  @@map("pokeathlon_stats")
}

// Core Move Meta tables
model MoveMetaCategories {
  id         Int    @id
  identifier String

  // Relations
  meta       MoveMeta[]
  prose      MoveMetaCategoryProse[]

  @@map("move_meta_categories")
}

model MoveMetaAilments {
  id         Int    @id
  identifier String

  // Relations
  meta       MoveMeta[]
  names      MoveMetaAilmentNames[]

  @@map("move_meta_ailments")
}

model MoveMeta {
  move_id         Int     @id
  meta_category_id Int
  meta_ailment_id  Int?
  min_hits         Int?
  max_hits         Int?
  min_turns        Int?
  max_turns        Int?
  drain            Int
  healing          Int
  crit_rate        Int
  ailment_chance   Int
  flinch_chance    Int
  stat_chance      Int

  // Relations
  move            Moves @relation(fields: [move_id], references: [id])
  metaCategory    MoveMetaCategories @relation(fields: [meta_category_id], references: [id])
  metaAilment     MoveMetaAilments? @relation(fields: [meta_ailment_id], references: [id])
  statChanges     MoveMetaStatChanges[]

  @@map("move_meta")
}

model MoveMetaStatChanges {
  move_id Int
  stat_id Int
  change  Int

  // Relations
  move    Moves @relation(fields: [move_id], references: [id])
  stat    Stats @relation(fields: [stat_id], references: [id])

  @@id([move_id, stat_id])
  @@map("move_meta_stat_changes")
}

// Core Move Flag tables
model MoveFlags {
  id         Int    @id
  identifier String

  // Relations
  flagMap    MoveFlagMap[]
  prose      MoveFlagProse[]

  @@map("move_flags")
}

model MoveFlagMap {
  move_id      Int @id
  move_flag_id Int

  // Relations
  move         Moves @relation(fields: [move_id], references: [id])
  flag         MoveFlags @relation(fields: [move_flag_id], references: [id])

  @@map("move_flag_map")
}

// Core Move Battle Style tables
model MoveBattleStyles {
  id         Int    @id
  identifier String

  // Relations
  prose      MoveBattleStyleProse[]
  naturePreferences NatureBattleStylePreferences[]

  @@map("move_battle_styles")
}

// Core Item Flag tables
model ItemFlags {
  id         Int    @id
  identifier String

  // Relations
  flagMap    ItemFlagMap[]
  prose      ItemFlagProse[]

  @@map("item_flags")
}

model ItemFlagMap {
  item_id      Int @id
  item_flag_id Int

  // Relations
  item         Items @relation(fields: [item_id], references: [id])
  flag         ItemFlags @relation(fields: [item_flag_id], references: [id])

  @@map("item_flag_map")
}

model ItemFlingEffects {
  id         Int    @id
  identifier String

  // Relations
  items      Items[]
  prose      ItemFlingEffectProse[]

  @@map("item_fling_effects")
}

// Core Berry tables
model Berries {
  id                   Int     @id
  item_id              Int
  firmness_id          Int
  natural_gift_power   Int?
  natural_gift_type_id Int?
  size                 Int
  max_harvest          Int
  growth_time          Int
  soil_dryness         Int
  smoothness           Int

  // Relations
  item                 Items @relation(fields: [item_id], references: [id])
  firmness             BerryFirmness @relation(fields: [firmness_id], references: [id])
  naturalGiftType      Types? @relation(fields: [natural_gift_type_id], references: [id])
  flavors              BerryFlavors[]

  @@map("berries")
}

model BerryFirmness {
  id         Int    @id
  identifier String

  // Relations
  berries    Berries[]
  names      BerryFirmnessNames[]

  @@map("berry_firmness")
}

model BerryFlavors {
  berry_id        Int
  contest_type_id Int
  flavor          Int

  // Relations
  berry           Berries @relation(fields: [berry_id], references: [id])
  contestType     ContestTypes @relation(fields: [contest_type_id], references: [id])

  @@id([berry_id, contest_type_id])
  @@map("berry_flavors")
}

// Core Characteristic tables
model Characteristics {
  id          Int     @id
  stat_id     Int
  gene_mod_5  Int

  // Relations
  stat        Stats @relation(fields: [stat_id], references: [id])
  text        CharacteristicText[]

  @@map("characteristics")
}

// Core Conquest tables
model ConquestEpisodes {
  id         Int    @id
  identifier String

  @@map("conquest_episodes")
}

model ConquestKingdoms {
  id         Int     @id
  identifier String
  type_id    Int

  @@map("conquest_kingdoms")
}

model ConquestMaxLinks {
  warrior_rank_id     Int @id
  pokemon_species_id  Int
  max_link            Int

  @@map("conquest_max_links")
}

model ConquestMoveData {
  move_id           Int     @id
  power             Int?
  accuracy          Int?
  effect_chance     Int?
  effect_id         Int?
  range_id          Int?
  displacement_id   Int?

  @@map("conquest_move_data")
}

model ConquestMoveDisplacements {
  id              Int     @id
  identifier      String
  affects_target  Int

  @@map("conquest_move_displacements")
}

model ConquestMoveEffects {
  id Int @id

  @@map("conquest_move_effects")
}

model ConquestMoveRanges {
  id         Int     @id
  identifier String
  targets    Int

  @@map("conquest_move_ranges")
}

model ConquestPokemonAbilities {
  pokemon_species_id Int @id
  slot               Int
  ability_id         Int

  @@map("conquest_pokemon_abilities")
}

model ConquestPokemonEvolution {
  evolved_species_id     Int     @id
  required_stat_id       Int?
  minimum_stat           Int?
  minimum_link           Int?
  kingdom_id             Int?
  warrior_gender_id      Int?
  item_id                Int?
  recruiting_ko_required Int

  @@map("conquest_pokemon_evolution")
}

model ConquestPokemonMoves {
  pokemon_species_id Int
  move_id            Int

  @@id([pokemon_species_id, move_id])        
  @@map("conquest_pokemon_moves")
}

model ConquestPokemonStats {
  pokemon_species_id Int
  conquest_stat_id   Int
  base_stat          Int

  @@id([pokemon_species_id, conquest_stat_id])
  @@map("conquest_pokemon_stats")
}

model ConquestStats {
  id         Int     @id
  identifier String
  is_base    Int

  @@map("conquest_stats")
}

model ConquestTransformationPokemon {
  transformation_id    Int @id
  pokemon_species_id   Int

  @@map("conquest_transformation_pokemon")
}

model ConquestTransformationWarriors {
  transformation_id      Int @id
  present_warrior_id     Int

  @@map("conquest_transformation_warriors")
}

model ConquestWarriors {
  id            Int     @id
  identifier    String
  gender_id     Int
  archetype_id  Int?

  @@map("conquest_warriors")
}

model ConquestWarriorArchetypes {
  id         Int    @id
  identifier String

  @@map("conquest_warrior_archetypes")
}

model ConquestWarriorRanks {
  id         Int     @id
  warrior_id Int
  rank       Int
  skill_id   Int

  @@map("conquest_warrior_ranks")
}

model ConquestWarriorRankStatMap {
  warrior_rank_id Int @id
  warrior_stat_id Int
  base_stat       Int

  @@map("conquest_warrior_rank_stat_map")
}

model ConquestWarriorSkills {
  id         Int    @id
  identifier String

  @@map("conquest_warrior_skills")
}

model ConquestWarriorSpecialties {
  warrior_id Int
  type_id    Int
  slot       Int

  @@id([warrior_id, type_id])
  @@map("conquest_warrior_specialties")      
}

model ConquestWarriorStats {
  id         Int     @id
  identifier String

  @@map("conquest_warrior_stats")
}

model ConquestWarriorTransformation {
  transformed_warrior_rank_id Int     @id
  is_automatic                Int
  required_link               Int?
  completed_episode_id        Int?
  current_episode_id          Int?
  distant_warrior_id          Int?
  female_warlord_count        Int?
  pokemon_count               Int?
  collection_type_id          Int?
  warrior_count               Int?

  @@map("conquest_warrior_transformation")
}

// Core Contest Combo tables
model ContestCombos {
  first_move_id  Int @id
  second_move_id Int

  // Relations
  firstMove      Moves @relation("FirstMove", fields: [first_move_id], references: [id])
  secondMove     Moves @relation("SecondMove", fields: [second_move_id], references: [id])

  @@map("contest_combos")
}

model SuperContestCombos {
  first_move_id  Int @id
  second_move_id Int

  // Relations
  firstMove      Moves @relation("SuperFirstMove", fields: [first_move_id], references: [id])
  secondMove     Moves @relation("SuperSecondMove", fields: [second_move_id], references: [id])

  @@map("super_contest_combos")
}

// Core Pokemon Move Method tables
model PokemonMoveMethods {
  id         Int     @id
  identifier String

  // Relations
  pokemonMoves PokemonMoves[]
  versionGroups VersionGroupPokemonMoveMethods[]
  prose      PokemonMoveMethodProse[]

  @@map("pokemon_move_methods")
}

model VersionGroupPokemonMoveMethods {
  version_group_id        Int @id
  pokemon_move_method_id  Int

  // Relations
  versionGroup            VersionGroups @relation(fields: [version_group_id], references: [id])
  moveMethod              PokemonMoveMethods @relation(fields: [pokemon_move_method_id], references: [id])

  @@map("version_group_pokemon_move_methods")
}

// Core Pokemon Shape tables
model PokemonShapes {
  id         Int    @id
  identifier String

  // Relations
  species    PokemonSpecies[]
  prose      PokemonShapeProse[]

  @@map("pokemon_shapes")
}

// Core Pokemon Color tables
model PokemonColors {
  id         Int    @id
  identifier String

  // Relations
  species    PokemonSpecies[]
  names      PokemonColorNames[]

  @@map("pokemon_colors")
}

// Core Pokemon Habitat tables
model PokemonHabitats {
  id         Int    @id
  identifier String

  // Relations
  species    PokemonSpecies[]
  names      PokemonHabitatNames[]

  @@map("pokemon_habitats")
}

// Core Type Efficacy tables
model TypeEfficacy {
  damage_type_id Int
  target_type_id Int
  damage_factor  Int

  // Relations
  damageType     Types @relation("DamageType", fields: [damage_type_id], references: [id])
  targetType     Types @relation("TargetType", fields: [target_type_id], references: [id])

  @@id([damage_type_id, target_type_id])     
  @@map("type_efficacy")
}

model TypeEfficacyPast {
  damage_type_id Int
  target_type_id Int
  damage_factor  Int
  generation_id  Int

  // Relations
  damageType     Types @relation("DamageTypePast", fields: [damage_type_id], references: [id])
  targetType     Types @relation("TargetTypePast", fields: [target_type_id], references: [id])
  generation     Generations @relation(fields: [generation_id], references: [id])

  @@id([damage_type_id, target_type_id, generation_id])
  @@map("type_efficacy_past")
}

// Core Version Group Region tables
model VersionGroupRegions {
  version_group_id Int @id
  region_id        Int

  // Relations
  versionGroup     VersionGroups @relation(fields: [version_group_id], references: [id])
  region           Regions @relation(fields: [region_id], references: [id])

  @@map("version_group_regions")
}

// Core Pokedex Version Group tables
model PokedexVersionGroups {
  pokedex_id       Int @id
  version_group_id Int

  // Relations
  pokedex          Pokedexes @relation(fields: [pokedex_id], references: [id])
  versionGroup     VersionGroups @relation(fields: [version_group_id], references: [id])

  @@map("pokedex_version_groups")
}

// ===========================================
// RELATION TABLES (matching CSV structure exactly)
// ===========================================

// Pokemon relation tables
model PokemonAbilities {
  pokemon_id Int     @id
  ability_id Int
  is_hidden  Int
  slot       Int

  // Relations
  pokemon    Pokemon @relation(fields: [pokemon_id], references: [id])
  ability    Abilities @relation(fields: [ability_id], references: [id])

  @@map("pokemon_abilities")
}

model PokemonAbilitiesPast {
  pokemon_id   Int
  generation_id Int
  ability_id   Int
  is_hidden    Int
  slot         Int

  // Relations
  pokemon      Pokemon @relation(fields: [pokemon_id], references: [id])
  generation   Generations @relation(fields: [generation_id], references: [id])
  ability      Abilities @relation(fields: [ability_id], references: [id])

  @@id([pokemon_id, generation_id, ability_id])
  @@map("pokemon_abilities_past")
}

model PokemonMoves {
  pokemon_id              Int
  version_group_id        Int
  move_id                 Int
  pokemon_move_method_id  Int
  level                   Int?
  order                   Int?
  mastery                 Int?

  // Relations
  pokemon                 Pokemon @relation(fields: [pokemon_id], references: [id])
  versionGroup            VersionGroups @relation(fields: [version_group_id], references: [id])
  move                    Moves @relation(fields: [move_id], references: [id])
  moveMethod              PokemonMoveMethods @relation(fields: [pokemon_move_method_id], references: [id])

  @@id([pokemon_id, version_group_id, move_id, pokemon_move_method_id])
  @@map("pokemon_moves")
}

model PokemonStats {
  pokemon_id Int
  stat_id    Int
  base_stat  Int
  effort     Int

  // Relations
  pokemon    Pokemon @relation(fields: [pokemon_id], references: [id])
  stat       Stats @relation(fields: [stat_id], references: [id])

  @@id([pokemon_id, stat_id])
  @@map("pokemon_stats")
}

model PokemonTypes {
  pokemon_id Int
  type_id    Int
  slot       Int

  // Relations
  pokemon    Pokemon @relation(fields: [pokemon_id], references: [id])
  type       Types @relation(fields: [type_id], references: [id])

  @@id([pokemon_id, type_id])
  @@map("pokemon_types")
}

model PokemonTypesPast {
  pokemon_id   Int
  generation_id Int
  type_id      Int
  slot         Int

  // Relations
  pokemon      Pokemon @relation(fields: [pokemon_id], references: [id])
  generation   Generations @relation(fields: [generation_id], references: [id])
  type         Types @relation(fields: [type_id], references: [id])

  @@id([pokemon_id, generation_id, type_id])
  @@map("pokemon_types_past")
}

model PokemonEggGroups {
  species_id  Int
  egg_group_id Int

  // Relations
  species     PokemonSpecies @relation(fields: [species_id], references: [id])
  eggGroup    EggGroups @relation(fields: [egg_group_id], references: [id])

  @@id([species_id, egg_group_id])
  @@map("pokemon_egg_groups")
}

model PokemonItems {
  pokemon_id Int
  version_id Int
  item_id    Int
  rarity     Int

  // Relations
  pokemon    Pokemon @relation(fields: [pokemon_id], references: [id])
  version    Versions @relation(fields: [version_id], references: [id])
  item       Items @relation(fields: [item_id], references: [id])

  @@id([pokemon_id, version_id, item_id])
  @@map("pokemon_items")
}

model PokemonGameIndices {
  pokemon_id Int
  version_id Int
  game_index Int

  // Relations
  pokemon    Pokemon @relation(fields: [pokemon_id], references: [id])
  version    Versions @relation(fields: [version_id], references: [id])

  @@id([pokemon_id, version_id])
  @@map("pokemon_game_indices")
}

model PokemonDexNumbers {
  species_id    Int
  pokedex_id    Int
  pokedex_number Int

  // Relations
  species       PokemonSpecies @relation(fields: [species_id], references: [id])
  pokedex       Pokedexes @relation(fields: [pokedex_id], references: [id])

  @@id([species_id, pokedex_id])
  @@map("pokemon_dex_numbers")
}

model PokemonFormGenerations {
  pokemon_form_id Int
  generation_id   Int
  game_index      Int

  // Relations
  pokemonForm    PokemonForms @relation(fields: [pokemon_form_id], references: [id])
  generation     Generations @relation(fields: [generation_id], references: [id])

  @@id([pokemon_form_id, generation_id])
  @@map("pokemon_form_generations")
}

model PokemonFormTypes {
  pokemon_form_id Int
  type_id         Int
  slot            Int

  // Relations
  pokemonForm    PokemonForms @relation(fields: [pokemon_form_id], references: [id])
  type           Types @relation(fields: [type_id], references: [id])

  @@id([pokemon_form_id, type_id])
  @@map("pokemon_form_types")
}

model PokemonFormPokeathlonStats {
  pokemon_form_id    Int
  pokeathlon_stat_id Int
  minimum_stat       Int
  base_stat          Int
  maximum_stat       Int

  // Relations
  pokemonForm       PokemonForms @relation(fields: [pokemon_form_id], references: [id])
  pokeathlonStat    PokeathlonStats @relation(fields: [pokeathlon_stat_id], references: [id])

  @@id([pokemon_form_id, pokeathlon_stat_id])
  @@map("pokemon_form_pokeathlon_stats")
}

model PokemonFormNames {
  pokemon_form_id    Int
  local_language_id  Int
  form_name          String?
  pokemon_name       String?

  // Relations
  pokemonForm       PokemonForms @relation(fields: [pokemon_form_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@id([pokemon_form_id, local_language_id])
  @@map("pokemon_form_names")
}

model PokemonSpeciesNames {
  pokemon_species_id Int
  local_language_id  Int
  name               String
  genus              String?

  // Relations
  species            PokemonSpecies @relation(fields: [pokemon_species_id], references: [id])
  language           Languages @relation(fields: [local_language_id], references: [id])

  @@id([pokemon_species_id, local_language_id])
  @@map("pokemon_species_names")
}

model PokemonSpeciesProse {
  pokemon_species_id Int
  local_language_id  Int
  form_description   String?

  // Relations
  species            PokemonSpecies @relation(fields: [pokemon_species_id], references: [id])
  language           Languages @relation(fields: [local_language_id], references: [id])

  @@id([pokemon_species_id, local_language_id])
  @@map("pokemon_species_prose")
}

model PokemonSpeciesFlavorSummaries {       
  pokemon_species_id Int
  local_language_id  Int
  flavor_summary     String?

  // Relations
  species            PokemonSpecies @relation(fields: [pokemon_species_id], references: [id])
  language           Languages @relation(fields: [local_language_id], references: [id])

  @@id([pokemon_species_id, local_language_id])
  @@map("pokemon_species_flavor_summaries") 
}

model PokemonSpeciesFlavorText {
  species_id  Int
  version_id  Int
  language_id Int
  flavor_text String

  // Relations
  species     PokemonSpecies @relation(fields: [species_id], references: [id])
  version     Versions @relation(fields: [version_id], references: [id])
  language    Languages @relation(fields: [language_id], references: [id])

  @@id([species_id, version_id, language_id])
  @@map("pokemon_species_flavor_text")
}

// Move relation tables
model MoveNames {
  move_id           Int     @id
  local_language_id Int
  name              String

  // Relations
  move              Moves @relation(fields: [move_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("move_names")
}

model MoveProse {
  move_id           Int     @id
  local_language_id Int
  short_effect      String?
  effect            String?

  // Relations
  move              Moves @relation(fields: [move_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("move_prose")
}

model MoveFlavorText {
  move_id           Int
  version_group_id  Int
  language_id       Int
  flavor_text       String

  // Relations
  move              Moves @relation(fields: [move_id], references: [id])
  versionGroup      VersionGroups @relation(fields: [version_group_id], references: [id])
  language          Languages @relation(fields: [language_id], references: [id])

  @@id([move_id, version_group_id, language_id])
  @@map("move_flavor_text")
}

model MoveFlavorSummaries {
  move_id           Int     @id
  local_language_id Int
  flavor_summary    String?

  // Relations
  move              Moves @relation(fields: [move_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("move_flavor_summaries")
}

model MoveChangelog {
  move_id                    Int     @id
  changed_in_version_group_id Int
  type_id                    Int?
  power                      Int?
  pp                         Int?
  accuracy                   Int?
  priority                   Int?
  target_id                  Int?
  effect_id                  Int?
  effect_chance              Int?

  // Relations
  move                       Moves @relation(fields: [move_id], references: [id])
  versionGroup               VersionGroups @relation(fields: [changed_in_version_group_id], references: [id])
  type                       Types? @relation(fields: [type_id], references: [id])
  target                     MoveTargets? @relation(fields: [target_id], references: [id])
  effect                     MoveEffects? @relation(fields: [effect_id], references: [id])

  @@map("move_changelog")
}

model MoveEffectChangelog {
  id                           Int     @id
  effect_id                    Int
  changed_in_version_group_id  Int

  // Relations
  effect                       MoveEffects @relation(fields: [effect_id], references: [id])
  versionGroup                 VersionGroups @relation(fields: [changed_in_version_group_id], references: [id])
  prose                        MoveEffectChangelogProse[]

  @@map("move_effect_changelog")
}

model MoveEffectChangelogProse {
  move_effect_changelog_id Int     @id
  local_language_id        Int
  effect                   String

  // Relations
  changelog                 MoveEffectChangelog @relation(fields: [move_effect_changelog_id], references: [id])
  language                  Languages @relation(fields: [local_language_id], references: [id])

  @@map("move_effect_changelog_prose")
}

model MoveEffectProse {
  move_effect_id   Int     @id
  local_language_id Int
  short_effect     String?
  effect           String?

  // Relations
  effect           MoveEffects @relation(fields: [move_effect_id], references: [id])
  language         Languages @relation(fields: [local_language_id], references: [id])

  @@map("move_effect_prose")
}

model MoveDamageClassProse {
  move_damage_class_id Int     @id
  local_language_id    Int
  name                 String
  description          String?

  // Relations
  damageClass          MoveDamageClasses @relation(fields: [move_damage_class_id], references: [id])
  language             Languages @relation(fields: [local_language_id], references: [id])

  @@map("move_damage_class_prose")
}

model MoveTargetProse {
  move_target_id   Int     @id
  local_language_id Int
  name             String
  description      String?

  // Relations
  target           MoveTargets @relation(fields: [move_target_id], references: [id])
  language         Languages @relation(fields: [local_language_id], references: [id])

  @@map("move_target_prose")
}

model MoveFlagProse {
  move_flag_id     Int     @id
  local_language_id Int
  name             String
  description      String?

  // Relations
  flag             MoveFlags @relation(fields: [move_flag_id], references: [id])
  language         Languages @relation(fields: [local_language_id], references: [id])

  @@map("move_flag_prose")
}

model MoveBattleStyleProse {
  move_battle_style_id Int     @id
  local_language_id    Int
  name                 String

  // Relations
  battleStyle         MoveBattleStyles @relation(fields: [move_battle_style_id], references: [id])
  language            Languages @relation(fields: [local_language_id], references: [id])

  @@map("move_battle_style_prose")
}

model MoveMetaAilmentNames {
  move_meta_ailment_id Int     @id
  local_language_id    Int
  name                 String

  // Relations
  ailment              MoveMetaAilments @relation(fields: [move_meta_ailment_id], references: [id])
  language             Languages @relation(fields: [local_language_id], references: [id])

  @@map("move_meta_ailment_names")
}

model MoveMetaCategoryProse {
  move_meta_category_id Int     @id
  local_language_id     Int
  description           String

  // Relations
  category              MoveMetaCategories @relation(fields: [move_meta_category_id], references: [id])
  language              Languages @relation(fields: [local_language_id], references: [id])

  @@map("move_meta_category_prose")
}

// Type relation tables
model TypeNames {
  type_id           Int     @id
  local_language_id Int
  name              String

  // Relations
  type              Types @relation(fields: [type_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("type_names")
}

model TypeGameIndices {
  type_id       Int @id
  generation_id Int
  game_index    Int

  // Relations
  type          Types @relation(fields: [type_id], references: [id])
  generation    Generations @relation(fields: [generation_id], references: [id])

  @@map("type_game_indices")
}

// Ability relation tables
model AbilityNames {
  ability_id        Int     @id
  local_language_id Int
  name              String

  // Relations
  ability           Abilities @relation(fields: [ability_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("ability_names")
}

model AbilityProse {
  ability_id        Int     @id
  local_language_id Int
  short_effect      String?
  effect            String?

  // Relations
  ability           Abilities @relation(fields: [ability_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("ability_prose")
}

model AbilityFlavorText {
  ability_id        Int
  version_group_id  Int
  language_id       Int
  flavor_text       String

  // Relations
  ability           Abilities @relation(fields: [ability_id], references: [id])
  versionGroup      VersionGroups @relation(fields: [version_group_id], references: [id])
  language          Languages @relation(fields: [language_id], references: [id])

  @@id([ability_id, version_group_id, language_id])
  @@map("ability_flavor_text")
}

model AbilityChangelog {
  ability_id Int @id
  changed_in_version_group_id Int

  // Relations
  ability           Abilities @relation(fields: [ability_id], references: [id])
  versionGroup      VersionGroups @relation(fields: [changed_in_version_group_id], references: [id])
  changelogProse    AbilityChangelogProse[]

  @@map("ability_changelog")
}

model AbilityChangelogProse {
  ability_changelog_id Int     @id
  local_language_id    Int
  effect               String

  // Relations
  changelog            AbilityChangelog @relation(fields: [ability_changelog_id], references: [id])
  language             Languages @relation(fields: [local_language_id], references: [id])

  @@map("ability_changelog_prose")
}

// Item relation tables
model ItemNames {
  item_id           Int     @id
  local_language_id Int
  name              String

  // Relations
  item              Items @relation(fields: [item_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("item_names")
}

model ItemProse {
  item_id           Int     @id
  local_language_id Int
  short_effect      String?
  effect            String?

  // Relations
  item              Items @relation(fields: [item_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("item_prose")
}

model ItemFlavorText {
  item_id           Int
  version_group_id  Int
  language_id       Int
  flavor_text       String

  // Relations
  item              Items @relation(fields: [item_id], references: [id])
  versionGroup      VersionGroups @relation(fields: [version_group_id], references: [id])
  language          Languages @relation(fields: [language_id], references: [id])

  @@id([item_id, version_group_id, language_id])
  @@map("item_flavor_text")
}

model ItemFlavorSummaries {
  item_id           Int     @id
  local_language_id Int
  flavor_summary    String?

  // Relations
  item              Items @relation(fields: [item_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("item_flavor_summaries")
}

model ItemGameIndices {
  item_id       Int @id
  generation_id Int
  game_index    Int

  // Relations
  item          Items @relation(fields: [item_id], references: [id])
  generation    Generations @relation(fields: [generation_id], references: [id])

  @@map("item_game_indices")
}

model ItemCategoryProse {
  item_category_id Int     @id
  local_language_id Int
  name             String

  // Relations
  category         ItemCategories @relation(fields: [item_category_id], references: [id])
  language         Languages @relation(fields: [local_language_id], references: [id])

  @@map("item_category_prose")
}

model ItemPocketNames {
  item_pocket_id   Int     @id
  local_language_id Int
  name             String

  // Relations
  pocket           ItemPockets @relation(fields: [item_pocket_id], references: [id])
  language         Languages @relation(fields: [local_language_id], references: [id])

  @@map("item_pocket_names")
}

model ItemFlagProse {
  item_flag_id     Int     @id
  local_language_id Int
  name             String
  description      String?

  // Relations
  flag             ItemFlags @relation(fields: [item_flag_id], references: [id])
  language         Languages @relation(fields: [local_language_id], references: [id])

  @@map("item_flag_prose")
}

model ItemFlingEffectProse {
  item_fling_effect_id Int     @id
  local_language_id    Int
  effect               String

  // Relations
  flingEffect          ItemFlingEffects @relation(fields: [item_fling_effect_id], references: [id])
  language             Languages @relation(fields: [local_language_id], references: [id])

  @@map("item_fling_effect_prose")
}

// Stat relation tables
model StatNames {
  stat_id           Int     @id
  local_language_id Int
  name              String

  // Relations
  stat              Stats @relation(fields: [stat_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("stat_names")
}

// Generation relation tables
model GenerationNames {
  generation_id     Int     @id
  local_language_id Int
  name              String

  // Relations
  generation        Generations @relation(fields: [generation_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("generation_names")
}

// Version relation tables
model VersionNames {
  version_id        Int     @id
  local_language_id Int
  name              String

  // Relations
  version           Versions @relation(fields: [version_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("version_names")
}

// Region relation tables
model RegionNames {
  region_id         Int     @id
  local_language_id Int
  name              String

  // Relations
  region            Regions @relation(fields: [region_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("region_names")
}

// Location relation tables
model LocationNames {
  location_id       Int     @id
  local_language_id Int
  name              String
  subtitle          String?

  // Relations
  location          Locations @relation(fields: [location_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("location_names")
}

model LocationGameIndices {
  location_id   Int @id
  generation_id Int
  game_index    Int

  // Relations
  location      Locations @relation(fields: [location_id], references: [id])
  generation    Generations @relation(fields: [generation_id], references: [id])

  @@map("location_game_indices")
}

model LocationAreaProse {
  location_area_id  Int     @id
  local_language_id Int
  name              String?

  // Relations
  locationArea      LocationAreas @relation(fields: [location_area_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("location_area_prose")
}

model LocationAreaEncounterRates {
  location_area_id     Int
  encounter_method_id  Int
  version_id           Int
  rate                 Int

  // Relations
  locationArea         LocationAreas @relation(fields: [location_area_id], references: [id])
  encounterMethod      EncounterMethods @relation(fields: [encounter_method_id], references: [id])
  version              Versions @relation(fields: [version_id], references: [id])

  @@id([location_area_id, encounter_method_id, version_id])
  @@map("location_area_encounter_rates")    
}

// Language relation tables
model LanguageNames {
  language_id        Int     @id
  local_language_id  Int
  name               String

  // Relations
  language           Languages @relation(fields: [language_id], references: [id])
  localLanguage      Languages @relation(fields: [local_language_id], references: [id])

  @@map("language_names")
}

// Pokedex relation tables
model PokedexProse {
  pokedex_id         Int     @id
  local_language_id  Int
  name               String
  description        String?

  // Relations
  pokedex            Pokedexes @relation(fields: [pokedex_id], references: [id])
  language           Languages @relation(fields: [local_language_id], references: [id])

  @@map("pokedex_prose")
}

// Evolution relation tables
model EvolutionTriggerProse {
  evolution_trigger_id Int     @id
  local_language_id    Int
  name                 String

  // Relations
  evolutionTrigger     EvolutionTriggers @relation(fields: [evolution_trigger_id], references: [id])
  language             Languages @relation(fields: [local_language_id], references: [id])

  @@map("evolution_trigger_prose")
}

// Growth Rate relation tables
model GrowthRateProse {
  growth_rate_id    Int     @id
  local_language_id Int
  name              String

  // Relations
  growthRate        GrowthRates @relation(fields: [growth_rate_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("growth_rate_prose")
}

// Nature relation tables
model NatureNames {
  nature_id         Int     @id
  local_language_id Int
  name              String

  // Relations
  nature            Natures @relation(fields: [nature_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("nature_names")
}

model NatureBattleStylePreferences {
  nature_id           Int     @id
  move_battle_style_id Int
  low_hp_preference   Int
  high_hp_preference  Int

  // Relations
  nature              Natures @relation(fields: [nature_id], references: [id])
  battleStyle         MoveBattleStyles @relation(fields: [move_battle_style_id], references: [id])

  @@map("nature_battle_style_preferences")
}

model NaturePokeathlonStats {
  nature_id           Int     @id
  pokeathlon_stat_id  Int
  max_change          Int

  // Relations
  nature              Natures @relation(fields: [nature_id], references: [id])
  pokeathlonStat      PokeathlonStats @relation(fields: [pokeathlon_stat_id], references: [id])

  @@map("nature_pokeathlon_stats")
}

// Contest relation tables
model ContestTypeNames {
  contest_type_id   Int     @id
  local_language_id Int
  name              String
  flavor            String?
  color             String?

  // Relations
  contestType       ContestTypes @relation(fields: [contest_type_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("contest_type_names")
}

model ContestEffectProse {
  contest_effect_id Int     @id
  local_language_id Int
  flavor_text       String?
  effect            String?

  // Relations
  contestEffect     ContestEffects @relation(fields: [contest_effect_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("contest_effect_prose")
}

model SuperContestEffectProse {
  super_contest_effect_id Int     @id
  local_language_id       Int
  flavor_text             String?

  // Relations
  superContestEffect     SuperContestEffects @relation(fields: [super_contest_effect_id], references: [id])
  language               Languages @relation(fields: [local_language_id], references: [id])

  @@map("super_contest_effect_prose")
}

// Encounter relation tables
model EncounterMethodProse {
  encounter_method_id Int     @id
  local_language_id   Int
  name                String

  // Relations
  encounterMethod     EncounterMethods @relation(fields: [encounter_method_id], references: [id])
  language            Languages @relation(fields: [local_language_id], references: [id])

  @@map("encounter_method_prose")
}

model EncounterConditionProse {
  encounter_condition_id Int     @id
  local_language_id      Int
  name                   String

  // Relations
  encounterCondition     EncounterConditions @relation(fields: [encounter_condition_id], references: [id])
  language               Languages @relation(fields: [local_language_id], references: [id])

  @@map("encounter_condition_prose")
}

model EncounterConditionValueProse {
  encounter_condition_value_id Int     @id
  local_language_id            Int
  name                         String

  // Relations
  conditionValue               EncounterConditionValues @relation(fields: [encounter_condition_value_id], references: [id])
  language                     Languages @relation(fields: [local_language_id], references: [id])

  @@map("encounter_condition_value_prose")
}

// Pal Park relation tables
model PalParkAreaNames {
  pal_park_area_id  Int     @id
  local_language_id Int
  name              String

  // Relations
  palParkArea       PalParkAreas @relation(fields: [pal_park_area_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("pal_park_area_names")
}

// Pokeathlon relation tables
model PokeathlonStatNames {
  pokeathlon_stat_id Int     @id
  local_language_id  Int
  name               String

  // Relations
  pokeathlonStat     PokeathlonStats @relation(fields: [pokeathlon_stat_id], references: [id])
  language           Languages @relation(fields: [local_language_id], references: [id])

  @@map("pokeathlon_stat_names")
}

// Pokemon Move Method relation tables
model PokemonMoveMethodProse {
  pokemon_move_method_id Int     @id
  local_language_id      Int
  name                   String
  description            String?

  // Relations
  moveMethod             PokemonMoveMethods @relation(fields: [pokemon_move_method_id], references: [id])
  language               Languages @relation(fields: [local_language_id], references: [id])

  @@map("pokemon_move_method_prose")
}

// Pokemon Shape relation tables
model PokemonShapeProse {
  pokemon_shape_id  Int     @id
  local_language_id Int
  name              String
  awesome_name      String?
  description       String?

  // Relations
  pokemonShape      PokemonShapes @relation(fields: [pokemon_shape_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("pokemon_shape_prose")
}

// Pokemon Color relation tables
model PokemonColorNames {
  pokemon_color_id  Int     @id
  local_language_id Int
  name              String

  // Relations
  pokemonColor      PokemonColors @relation(fields: [pokemon_color_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("pokemon_color_names")
}

// Pokemon Habitat relation tables
model PokemonHabitatNames {
  pokemon_habitat_id Int     @id
  local_language_id  Int
  name               String

  // Relations
  pokemonHabitat     PokemonHabitats @relation(fields: [pokemon_habitat_id], references: [id])
  language           Languages @relation(fields: [local_language_id], references: [id])

  @@map("pokemon_habitat_names")
}

// Berry relation tables
model BerryFirmnessNames {
  berry_firmness_id Int     @id
  local_language_id Int
  name              String

  // Relations
  berryFirmness     BerryFirmness @relation(fields: [berry_firmness_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("berry_firmness_names")
}

// Characteristic relation tables
model CharacteristicText {
  characteristic_id Int     @id
  local_language_id Int
  message           String

  // Relations
  characteristic    Characteristics @relation(fields: [characteristic_id], references: [id])
  language          Languages @relation(fields: [local_language_id], references: [id])

  @@map("characteristic_text")
}

// Conquest relation tables
model ConquestEpisodeNames {
  episode_id        Int     @id
  local_language_id Int
  name              String

  @@map("conquest_episode_names")
}

model ConquestEpisodeWarriors {
  episode_id Int @id
  warrior_id Int

  @@map("conquest_episode_warriors")
}

model ConquestKingdomNames {
  kingdom_id        Int     @id
  local_language_id Int
  name              String

  @@map("conquest_kingdom_names")
}

model ConquestMoveDisplacementProse {
  move_displacement_id Int     @id
  local_language_id    Int
  name                 String
  short_effect         String?
  effect               String?

  @@map("conquest_move_displacement_prose")
}

model ConquestMoveEffectProse {
  conquest_move_effect_id Int     @id
  local_language_id       Int
  short_effect            String?
  effect                  String?

  @@map("conquest_move_effect_prose")
}

model ConquestMoveRangeProse {
  conquest_move_range_id Int     @id
  local_language_id      Int
  name                   String
  description            String?

  @@map("conquest_move_range_prose")
}

model ConquestStatNames {
  conquest_stat_id   Int     @id
  local_language_id  Int
  name               String

  @@map("conquest_stat_names")
}

model ConquestWarriorNames {
  warrior_id         Int     @id
  local_language_id  Int
  name               String

  @@map("conquest_warrior_names")
}

model ConquestWarriorSkillNames {
  skill_id           Int     @id
  local_language_id  Int
  name               String

  @@map("conquest_warrior_skill_names")
}

model ConquestWarriorStatNames {
  warrior_stat_id    Int     @id
  local_language_id  Int
  name               String

  @@map("conquest_warrior_stat_names")
}

// Egg Group relation tables
model EggGroupProse {
  egg_group_id       Int     @id
  local_language_id  Int
  name               String

  // Relations
  eggGroup           EggGroups @relation(fields: [egg_group_id], references: [id])
  language           Languages @relation(fields: [local_language_id], references: [id])

  @@map("egg_group_prose")
}

// ===========================================
// TRANSLATION TABLES
// ===========================================

model Translations {
  language_id  Int     @id
  table        String
  id           Int
  column       String
  source_crc   Int
  string       String

  @@map("translations")
}
